Backend (Golang):
Create a Golang project structure:

main.go: Entry point for the application.
router.go: Define API routes and handlers.
handlers.go: Implement request handlers.
Dependencies:

Use a Golang web framework like Gin for building the API.
Use a JWT library for handling authentication and authorization.
Database:

Use a relational database (e.g., PostgreSQL, MySQL) to store user and vehicle information.
Create tables for users, vehicles, and roles.
Authentication Middleware:

Implement middleware to handle JWT authentication for protected routes.
JWT should contain user roles and other necessary information.
User Registration and Authentication:

Implement registration endpoint to create user accounts.
Implement login endpoint to generate JWT upon successful authentication.
Role-based Authorization:

Use middleware to check user roles for specific actions.
Admins can manage users and vehicles, users can add/update their vehicles, and companies can have specific access based on requirements.
Vehicle Information:

Implement CRUD operations for vehicle information.
Associate vehicles with users and handle permissions accordingly.
Error Handling:

Implement robust error handling to provide meaningful responses.
Frontend (Angular):
Create Angular Project:

Set up Angular project using Angular CLI.
Authentication Service:

Create a service for handling user registration, login, and JWT management.
Store JWT securely (e.g., in local storage) and include it in headers for authenticated requests.
User Interface:

Design user interfaces for registration, login, and dashboard.
Separate views for admin, user, and company roles.
Role-based Access Control (RBAC):

Implement guards to control access based on user roles.
Show/hide UI elements based on the user's role.
Vehicle Management Components:

Create components for listing, adding, updating, and deleting vehicles.
Ensure appropriate forms and validations.
Interact with Backend:

Use Angular HTTP client to interact with the Golang backend APIs.
Handle JWT token in headers for authentication.
Error Handling:

Implement error handling for API requests and form validations.
Security Considerations:
HTTPS:

Ensure your application runs over HTTPS to encrypt data in transit.
Input Validation:

Implement proper input validation on both frontend and backend to prevent injection attacks.
Password Hashing:

Hash and salt passwords before storing them in the database.
Token Expiry:

Set a reasonable expiration time for JWT tokens.
CSRF Protection:

Implement measures to protect against Cross-Site Request Forgery attacks.
CORS Configuration:

Configure CORS to only allow requests from trusted origins.